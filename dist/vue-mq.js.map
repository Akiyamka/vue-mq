{"version":3,"file":"vue-mq.js","sources":["../src/helpers.js","../src/index.js"],"sourcesContent":["import json2mq from 'json2mq'\n\nexport function convertBreakpointsToMediaQueries(breakpoints) {\n  const keys = Object.keys(breakpoints)\n  const breakpointValues = [0, ...Object.values(breakpoints).slice(0, -1)]\n  const mediaQueries = breakpointValues.reduce((sum, value, index) => {\n    const options = Object.assign(\n      {\n        minWidth: value,\n      },\n      index < keys.length - 1 ? { maxWidth: breakpointValues[index+1] - 1 } : {},\n    )\n    const mediaQuery = json2mq(options)\n    return Object.assign(\n      sum,\n      {\n        [keys[index]]: mediaQuery,\n      }\n    )\n  }, {})\n  return mediaQueries\n}\n\nexport function transformValuesFromBreakpoints(breakpoints, values, currentBreakpoint) {\n  const findClosestValue = (currentBreakpoint) => {\n    const index = breakpoints.findIndex(b => b === currentBreakpoint)\n    const newBreakpoint = index !== -1 || index !== 0 ? breakpoints[index-1] : null\n    if (!newBreakpoint) return values[index]\n    return values[newBreakpoint] || findClosestValue(newBreakpoint)\n  }\n  const result = values[currentBreakpoint] || findClosestValue(currentBreakpoint)\n  return result\n}\n","import { convertBreakpointsToMediaQueries, transformValuesFromBreakpoints } from './helpers.js'\n\nconst DEFAULT_BREAKPOINT = {\n  sm: 450,\n  md: 1250,\n  lg: Infinity,\n}\n\nconst install = function (Vue, { breakpoints = DEFAULT_BREAKPOINT } = {}) {\n  // Init reactive component\n  const reactorComponent = new Vue({\n    data: () => ({\n      currentBreakpoint: null,\n    })\n  })\n\n  const mediaQueries = convertBreakpointsToMediaQueries(breakpoints)\n  Object.keys(mediaQueries).map((key) => {\n    const mediaQuery = mediaQueries[key]\n    const enter = () => { reactorComponent.currentBreakpoint = key }\n    _subscribeToMediaQuery(mediaQuery, enter)\n  })\n\n  function _subscribeToMediaQuery(mediaQuery, enter) {\n    const mql = window.matchMedia(mediaQuery)\n    const cb = ({ matches }) => {\n      if (matches) enter()\n    }\n    mql.addListener(cb) //subscribing\n    cb(mql) //initial trigger\n  }\n\n  Vue.filter('mq', (currentBreakpoint, values) => {\n    return transformValuesFromBreakpoints(Object.keys(breakpoints), values, currentBreakpoint)\n  })\n  Vue.mixin({\n    computed: {\n      $mq() {\n        return reactorComponent.currentBreakpoint\n      },\n    }\n  })\n}\n\nexport default { install }\n"],"names":["convertBreakpointsToMediaQueries","keys","Object","breakpointValues","values","slice","mediaQueries","reduce","options","assign","index","length","maxWidth","mediaQuery","json2mq","transformValuesFromBreakpoints","result","breakpoints","findIndex","b","newBreakpoint","findClosestValue","DEFAULT_BREAKPOINT","Infinity","install","mql","window","matchMedia","cb","matches","enter","addListener","reactorComponent","map","currentBreakpoint","filter","mixin"],"mappings":"u4CAEO,QAASA,iCAAT,GAAuD,IACtDC,GAAOC,OAAOD,IAAPC,IACPC,+BAA0BD,OAAOE,MAAPF,IAA2BG,KAA3BH,CAAiC,CAAjCA,CAAoC,CAAC,CAArCA,IAC1BI,EAAeH,EAAiBI,MAAjBJ,CAAwB,eAAuB,IAC5DK,GAAUN,OAAOO,MAAPP,CACd,WAAA,CADcA,CAIdQ,EAAQT,EAAKU,MAALV,CAAc,CAAtBS,CAA0B,CAAEE,SAAUT,EAAiBO,EAAM,CAAvBP,EAA4B,CAAxC,CAA1BO,GAJcR,EAMVW,EAAaC,iBACZZ,QAAOO,MAAPP,GAEL,EACGD,OADH,CAFKC,CARY,CAAAC,cAkBvB,QAAgBY,+BAAhB,OAAuF,IAO/EC,GAASZ,MANU,aAAuB,IACxCM,GAAQO,EAAYC,SAAZD,CAAsB,kBAAKE,MAA3B,CAAAF,EACRG,EAA0B,CAAC,CAAXV,MAA0B,CAAVA,IAAhBA,CAA8BO,EAAYP,EAAM,CAAlBO,CAA9BP,CAAqD,KAF7B,SAIvCN,MAAyBiB,IAJc,CAGnBjB,IAH7B,CAM4CiB,aC5B9C,GAAMC,oBAAqB,IACrB,GADqB,IAErB,IAFqB,IAGrBC,QAHqB,CAA3B,CAMMC,QAAU,WAA0D,gBAerB,IAC3CC,GAAMC,OAAOC,UAAPD,IACNE,EAAK,WAAiB,IAAdC,KAAAA,QAAc,GACbC,GADf,IAGIC,cAL6C,0EAfpBd,YAAAA,aAAcK,qBAEvCU,EAAmB,MAAQ,MACzB,iBAAO,mBACQ,IADR,EADkB,CAAR,EAMnB1B,EAAeN,2CACdC,QAAmBgC,IAAI,WAAS,IAC/BpB,GAAaP,SACL,UAAM,GAAmB4B,mBAAvC,EAFF,EATwE,GAwBpEC,OAAO,KAAM,aAA+B,OACvCpB,gCAA+Bb,OAAOD,IAAPC,GAA/Ba,KADT,EAxBwE,GA2BpEqB,MAAM,UACE,MACF,OACGJ,GAAiBE,kBAFlB,CADF,EA3BZ,CANA,OA0Ce,CAAEV,OAAF,CA1Cf"}